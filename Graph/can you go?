you have a tree. and you have vaule of all node.  you are allow to go from node u to node v .
only if the path from node u to node v, all node are content same value. 
there are two type of query
1. check if you can go from node u to node v.
2. change the node value.

12 8
1 1 2 1 2 2 2 1 1 3 2 2
1 2
1 3
1 8
2 4
2 5
3 7
3 6
8 10
8 9
7 11
7 12

1 4 9
1 11 6
2 9 2
1 11 9
2 1 2
1 11 9
2 8 2
1 11 9

node 4 to node 9 
the path is : 4 -> 2 -> 1 -> 8 -> 9
the value is: 1 -> 1 -> 1 -> 1 -> 1
all the path value is same so. you are allow to go. 
node 6 to node 11
the path is : 6 -> 3 -> 7 -> 11
the value is: 2 -> 2 -> 2 -> 2
all the path value is same. so you are allow to go.

node 11 to 8
the path is : 11 -> 7 -> 3 -> 1 -> 8
the value is: 2  -> 2 -> 2 -> 1 -> 1
here path value is not unique so you are note allow to go this path.

 update the node 1 into 2
 update the node 8 into 2

node 11 to 8
the path is : 11 -> 7 -> 3 -> 1 -> 8
the value is: 2  -> 2 -> 2 -> 2 -> 2
all the path value is same. so you are allow to go.

after update the node 1 and 8 now you are allow to move from node 11 to node 8

#include <bits/stdc++.h>
using namespace std;
#define TN typename

//debug..........
#define error(args...) {vector<string>_v=split(#args,',');err(_v.begin(),args);cout<<endl;}
vector<string> split(const string &s, char c) {vector<string>v; stringstream ss(s); string x;while (getline(ss, x, c))v.emplace_back(x); return move(v);} void err(vector<string>::iterator it) {}
template<typename T, typename... Args>void err(vector<string>::iterator it, T a, Args...args) {cout << it->substr((*it)[0] == ' ', it->length()) << " = " << a << " "; err(++it, args...);}
#define int long long
#define endl '\n'
const int N = 1e5+5;
const int sN = 130;
const int k = 22;
int n;
vector<int>ed[N+2];
int tm1 = 0;
int st[N+2] , ft[N+2];
int a[N+2];
int par[N+2][k];
int dep[N+2];
 
template<TN T>
struct BIT{
    int n;
    vector<T>t;
    BIT(){};
    BIT(int _n){
        n = _n;
        t.assign(n+1 , 0);
    }
    T query(int i){
        T ans = 0;
        while(i > 0){
            ans += t[i];
            i -= (i&-i);
        }
        return ans;
    }
    void upd(int i, T val){
        if(i <= 0)return ;
        while(i<=n){
            t[i] += val;
            i += (i&-i);
        }
    }
    void upd(int l, int r , T val){
        upd(l, val);
        upd(r-1 , -val);
    }

    T query(int l, int r){
        return query(r) - query(l-1);
    }
};

int get_lca(int x, int y){
    if(dep[x] > dep[y])swap(x,y);
    for(int i=k-1;i>=0 and x != y ;i--){
        if(dep[par[y][i]] >= dep[x]){
            y = par[y][i];
        }
    }
    
    if(x == y)return x;
 
    for(int i=k-1;i>=0;i--){
        if(par[x][i] != par[y][i]){
            x = par[x][i];
            y = par[y][i];
        }
    }
    return par[x][0];
}
 
 
void dfs(int x, int p = -1, int d = 0){
    dep[x] = d;
    for(int i=1;i<k;i++){
        par[x][i] = par[par[x][i-1]][i-1];
    }
    st[x] = ++tm1;
    for(auto y: ed[x]){
        if(p != y){
            par[y][0] = x;
            dfs(y,x,d+1);
        }
    }
    ft[x] = ++tm1;
}
signed solve(){
    
    int q;
    cin>>n>>q;
    for(int i=1;i<=n;i++){
        cin>>a[i];
    }
    int x,y;
    for(int i=1;i<n;i++){
        cin>>x>>y;
        ed[x].push_back(y);
        ed[y].push_back(x);
    }
 
    tm1 = 0;
    par[1][0] = 1;
    dfs(1);

    BIT<int>bt[sN];
    for(int i=1;i<sN;i++){
        bt[i] = BIT<int>(tm1+1);
    }
 
    for(int i=1;i<=n;i++){
        bt[a[i]].upd(st[i] , 1);
        bt[a[i]].upd(ft[i] , -1);
    }

    while(q--){
        int k;
        cin>>k;
        if(k == 2){
            int x , y;
            cin>>x>>y;
            bt[a[x]].upd(st[x],-1);
            bt[a[x]].upd(ft[x],1);
            a[x] = y;
            bt[a[x]].upd(st[x],1);
            bt[a[x]].upd(ft[x],-1);
        }else{
            int x,y;cin>>x>>y;
            int z = get_lca(x,y);
            if(a[x] != a[y] or a[x] != a[z] or a[y] != a[z]){
                cout<<"No"<<endl;
                continue;
            }
            int tem1 = bt[a[x]].query(st[x]);
            int tem2 = bt[a[x]].query(st[y]);
            int ans = tem1 + tem2;
            ans -= 2*bt[a[x]].query(st[z]); 
            ans++;
            int dist_node = (dep[x] - dep[z])+(dep[y]-dep[z])+1;
            if(dist_node == ans){
                cout<<"Yes"<<endl;
            }else{
                cout<<"No"<<endl;
            }
        }

    }
    return 0;
}
signed main(){
    ios::sync_with_stdio(false);cin.tie(0);int test = 1;
    // cin>>test;
    while (test--)solve();
    return 0;
} 


